"During my last summer internship, I was working on integrating Google Publisher Tag advertisement slots into the Singapore Michelin Guide website, which was built on Grails. I started by simply changing the existing hardcoded static ad tags to GPT ads. This worked at first because I only worked on the front page. However, my supervisor later wanted me to incorporate about 70 other advertisements throughout the website, including in the article template, which generated article webpages dynamically based on content. When I tried to simply hardcode the ad tags in, I ran into two issues: the ads would often display too close to each other or to the top/bottom of the page, and it was tedious to add that many advertisements to the website by copying and pasting the same tag. 

I realized that I had made a mistake by trying to integrate the ads in this way, and instead made a new Grails tagset for the GPT ads and added code to make sure the ads were appropriately placed in the middle of the article and spaced apart. I learned that I should have started with this more scalable fix, anticipating that I'd have to add so many other ad slots, instead of just copying and pasting some code at the beginning. "
"I was working on this group homework on Machine Learning. My teammate and I took different approaches on a problem and we got different answers. After we went through both versions, I found out that the other approach was actually correct. I learned that sometimes we can benefit from different views and learn from them."
"This past summer, I began thinking about Junior-year internships. I thought that with my military experience, financial-industry experience, and most recent programming internship at a startup, I'd have no problem doing well in interviews and securing any internship I wanted. I couldn't have been more wrong. At first, after applying to my top choices, none of them contacted me back even for a first interview. Then, once another company did finally contact me, I was shocked at how slow and inefficient I was at solving their coding question. This was a huge disappointment, and definitely humbled me a bit, realizing that the talent and competition for software engineering around me is huge.
However, I was up for the challenge- I dove right into studying and improving my application. I practiced coding problems every day, reached out to my peers for advice and referrals, and started working on a side project to boost my experience. The first few interviews were still rocky, but I was learning a lot- and finally when I was able to reach through to Facebook for a first round (my top choice!), I felt as ready as I could be and did well in the interviews!
Long story short: I didn't realize how behind I was with tech experience and wasn't aware of the amazing talent around me, but took up the challenge and utilized the resources at my disposal to improve and learn."
"I'm pretty stubborn by nature, so I like to do things my way, from taking the directions I know to coding using certain practices. One time I was working with a friend on a programming assignment and found myself having difficulty figuring out how to implement a function recursively. Instead of asking for help, I kept trying to debug and debug, and this stubbornness would leave me sleepless the entire night. Eventually I did ask for help from my friend, and he showed me that I was making a small error that was preventing the function from running as I intended. I learned that it's important to swallow your pride and ask for help, even when you don't want to, because it can go a long way and make what could be a difficult task much easier than expected in the end."
Freshman year I was on my way to an interview and I missed it because I was late to it by 30 minutes because I got lost in Chinatown. I thought that it would be easy to navigate and I would be able to make it in the time that google maps gave. I learned to always give myself more time to travel to new places to account for delays in transportation and getting lost. 
"This semester I was doing research at Creative Machine lab, building an app taking livestream data from ultrasound scanning probe and display 3D shape of the scanned object on mobile and native app. My initial thought was to use Javascript, since it is convenient to convert JS into both native app (using Electron) and mobile app (creating an app that redirects to a website built in JS). However, I underestimate the requirement at computation power, since there are more than 1M data points we need to process at each second, JS is not able to support such large amount of data computation at a high enough speed. We later turned to CPP and build our app on QT. What I learned from this experience is that whenever developing an application based on certain requirements, always think through from different perspectives on what can be some potential bottlenecks on the performance of an app. Only after we figure out the performance that we need to achieve, we can think about something extra that will make our product better."
"A few years ago I discovered I had given incorrect information about server configuration settings for a client which inadvertently had resulted in performance slowdown. Before my discovery, it was my belief that my configuration was correct largely due to my experience in computers and server setup. Being the stubborn individual that I was, my assumptions were incorrect that the client was solely responsible in causing the server to slow down. It was not until I had looked over my own notes and the operating system's documentation that the client received outdated information that no longer applied to the new system. As you could imagine, this predicament was highly embarrassing as I prided myself in knowing and keeping up to date to changes in the software I utilize. In hindsight, after thinking over the experience I recognized the faults at making false assumptions of my own abilities and assuming blame on the client (the primary user in this case). Based on the outcome of this case, I learned the importance of consistently questioning one's self over choice of design for a client's use and whether all information over a particular system is being correctly applied for optimal performance."
"On my research team, my partner and I were arguing about hardware design for a liquid extrusion system. We ended up 3D printing our respective designs and putting them to the test, and his clearly won. Afterwards, we sat down and he explained some great design principles – besides considering fluid dynamics of the liquid extrusion, there were also basic things to think about, like setup and cleanup of the design. "
"Just a few minutes ago, I was wrong about being able to take a Psychology class and had a cathartic experience. To register for any Psychology seminar, one has to first send the seminar professor an email detailing about oneself, one's experience, one's major requirements, and one's reasons for wanting to take part in the seminar. I thought the seminar class I was registering for was an exception and I wouldn't have to send an email to the professor. However, it turns out that I had to. Therefore, I sent a long and detailed email to the professor. The professor replied within 10 minutes saying that I would not be able to take the seminar either this year or the next (or any years after that), because the seminar was filled with Neuroscience and Psychology majors, while I am a Computer Science major with a Psychology minor.

I had already planned out my course schedule and was really pumped to take that seminar. After reading that heartbreaking email, I gained first-hand experience in rejection, in-group preference, and marginalization. I learned about myself: how I was too sure about my own plans, how I had to become more adaptable. I learned about having more back-up plans and to understand the professor's perspectives, and to take into account that there are so many people in the world who want so many things that are so similar to things that I want. More practically, I gained experience in emailing professors emails courteously. After the experience, I have begun to explore more options, considered other courses and ways to spend my time here at Columbia, and started to appreciate and make do with what I have."
"This past summer, I interned at an aerospace company and built a customized tool to measure material properties. At first, my software accompanying the tool ran as a command-line program. I thought the senior engineers would be impressed with my tool's accuracy and measurement speed - but as they squinted at the tiny numbers in my terminal window, and asked how I was sure of my results, I realized they weren't. I learned that user interfaces, and presentation in general, isn't just a concern for large-scale, polished tech companies. They are necessary to interact with and generate trust in smaller projects as well. I spent the rest of the summer learning Qt and attempting to build a UI that better communicated what my tool was capable of. "
"I didn't know what a VM was during my first session of ADI labs, and made the mistake of trying to describe it when speaking to the team leader. I was embarrassed, but his encouragement afterwards taught me not to be ashamed to ask questions when I didn't know something."
"I spent an entire summer at a soul-crushing job at Amazon working in Finance because I thought it would be worth the money even though I'm not interested in Finance at all (also thought I could get a foot in the door with the software engineering departments there)

I learned the importance of taking your own happiness in consideration before making long-term decisions that might benefit you in the future"
"I have found that I am wrong about lots of things during this year. Firstly, I am not as smart as I thought when I got the offer from Columbia and secondly, due to previous misunderstanding, I am not working hard enough for my first semester. When I got the offer, I was so happy that I forgot I am not a native speaker in English and my knowledge of software is limited as well. These are the reasons why I feel study is so difficult now. At the beginning, I choose to be focus on taking notes instead of really understand what professor taught and never review the notes after class. After three months of adjustment, I am trying to conclude a better way by myself. I still take notes during class but only abstract conclusion and I write more questions than answers. I would look into these questions after class and make a list of knowledge I find difficult. I use Google and Piazza more often then before, and study not just from professor and TA but also my classmates as well. Even though it takes more time and effort, I find it quiet useful for me and I would like to keep this habit in following study."
"I work at an English-as-a-second language program for immigrants. One time I was asked to sub for a teacher: I expected the students to find grammar topics drab so I focused on vocabulary topics despite what the lesson plan had scheduled for the day. However, when I actually taught the lesson I found the students to be very interested in grammar, preferring its clear, almost algorithmic rules to the more general and mnemonic vocabulary exercises. From this experience, I learned that while gut-feeling is important, it's also important to pay attention to what people with more experience and knowledge may advice."
"Though the details are much less relevant than the lesson I learned, I will include some context: as a teaching assistant for Data Structures, I encounter many interesting uses of Java throughout the semester, and tend to assume that anything I don't recognize immediately is probably wrong. A student whose midterm I was grading used the bitwise XOR operation on two booleans, and I deducted points for invalid Java. As I was working on a separate assignment later that day, I realized that this is of course not true, so I sorted through 250 midterms to find the one I made the mistake on and gave the points back. From this, I learned to be less cynical to new approaches to problems that I had not previously considered and to extend the benefit of the doubt when I am unsure about something."
"First, in study, when I pursuing my master degree in another field, I was doing research rather the homework. I always thought that what I should do is a big, totally new thing. However my tutor always asked me to do the thing that someone else has done before.  After several years, I understand that we can not always make a big break, sometimes a small change or a small innovation also needs lots of effort. So what I learn is to pay attention to the details, they are not easy.
Second, in life,  I always think I am still young to maintain a good health and the goal of my life is to study. As time going, I understand that I can not ignore the health. Good sleep, eating well, regular exercise are things which will give me a better condition to learn more things."
"I remember a time when I have different opinions with my group members on the   Matlab project and I am wrong with some details. I decided to have more discussion and meetings with them to solve the problem together. After this, I learned that when I were wrong sometime, I should be patient to think and solve the problem with group members together with more discussions and meetings."
"My mistake is about choosing the college. When I applied for school, I got accepted on both a small college in PA and a university in NYC. My parents and a lot of my friends recommend me to go to the Fordham, cause it is in new york. However, I thought I would love a smaller liberal arts college, so I decided to go to gettysburg. It was a nice experience, but after study there for a while, I feel that my life is too peace and quiet. The life there isn't very challenge and due to the location, there aren't many opportunities open to students. I enjoy studying there but don't really want to live a life like a retired man. So I decided to take the combined program in my school and study in columbia university. After this experience, I realize that people's advice, especially people older than me, does really helpful. Also, I discover that I am the person who likes challenge and fast pace life better. "
"I once thought that UI design is purely an artistic thing. My perception was that a good software should just have best technology implemented. I did not pay much attention to the UI aspect until the time I was to build up a software prototype in my software engineering class. During the demonstration, I noticed that compared with other works, my software interface turned out to be raw and hard to manipulate. So even our functionalities were the same, people favored those user-friendly interfaces. It was then did I realize that the ultimate user's feeling also matters, even more than the technology itself. So in my further projects, I have paid more attention to making our software user-friendly and easy to recognize, which has also led to my growing interest in the UI field."
"I have been wrong about unbelievably so many things, and I am the better for it. For example, I didn't have a shred of intellectual humility before I took freshman intensive organic chemistry. I didn't care to know how much of an icon Prof. Ronald Breslow was in the field or how bright and fascinating my classmates were. I placed into the class on a bet, and all I wanted to do was to prove that I could do it. My doggedness was more misplaced pride than tenacity: It's not that I was wrong in thinking I could take and pass the class. (I did, barely.) I was wrong in thinking I could lone wolf the class and get by without re-examining my study habits and academic discipline (or lack thereof). 

I learned a lot about my limitations from going through that class, and I learned the value of a solid support network (everyone needs that one friend who will tell you your first-ever failed midterm isn't the end of the world) as well as generalizable techniques in approaching material I have zero familiarity with and persisting until I understood, as Feynman would define genuine understanding. I learned that beyond the grade, the class presented me with other self-selecting students who could be really cool to get to know, as well as a professor full of wisdom who will be dearly missed. 

More than anything else, I learned how the hard thing about hard things is putting forward the intellectual honesty and courage to stay with the hard stuff, how to not take my learning for granted, and that if all else fails, ""And then a miracle happens"" is the kind of absurd hand-waving that just might net a few pity points on an exam. (I am joking about that last part: You will never see that kind of half-assed answer from me in class.)"
"Last year, in data structures, my friend told me that sitting in the front row would improve my concentration, my note-taking, and my participation with the professor. I am normally a student who likes to sit in the back, so I didn’t believe him. He convinced me to try, however, and he ended up being completely correct. I received the best grade I have ever gotten in a CS class thanks to careful, attentive, engaged note taking every single class, which I credit largely to sitting in the front row. I learned my lesson about lecture habits, and still sit as close to the front as I can today. "
"Having been married to someone smarter than me for a long time, I have learned that there is a point in every argument when it's time to stop talking and start listening because it is very likely that I am wrong and need to re-evaluate the basis of my argument. If after that process I still think I am right, I have learned that it is more productive to compromise than try to win an argument."
"Last week, I was wrong in judging the character of a friend before getting to know him better as a person. I assumed that he carried his behavior in a certain way because he was mean-spirited. However, after speaking to him, I realized that there was a lot going on in his life that I didn't know, and had I known, my words to him would've been less harsh. Through it, I learned that it's really important to get to know people well, how they think and why they interact with the world around them a certain way, before I make action/design choices. "
"I built a website to help my friend ask his crush on a date last summer. Since it was my first time building a website, I made many trial and errors. During the process, my biggest mistake was to not backing up my code and accidentally deleting part of the code that created the pop-up message box. It took me several hours to find the missing code. From this, I learned to always backup and track my code changes even if it is a small personal project."
"This semester, one of my computer science courses involved a very difficult project. After weeks of non-stop work on the project and many late nights, I finally got the optimal solution, which only a handful of people figured out. Unfortunately, my earlier draft was saved under the same name on my computer and I accidently submitted that one instead. Although I was positive that I had made sure the correct one was submitted, it became apparent after the assignment was graded that the project was an earlier iteration. I lost a large portion of the points and my overall grade noticeably dropped. Although this was a painful experience, it taught me about the importance of attention to detail, double-checking work, coming to terms with mistakes, and resilience."
"I am currently doing a database project, and made a lot of mistake, but learned a lot from it. "
"When I was working with a high school friend of mine during the summer after my freshman year to make an app (""DoorSlice,"" now closed) (he was coding front end and I back end) I was also taking summer classes. My friend and partner in this endeavor, Oliver, knew I had registered for classes before we embarked on this project together, but I was wrong to think it was thus an issue I did not need to hash out. Halfway through the summer this unspoken frustration of a difference in work on the project (because I was going to classes two hours a day while he remained working in the apartment) came to the surface and led to a fairly big disagreement between us two about who was working harder, front end vs back end responsibilities, etc. 

I learned that one can never ""over communicate"" with their team. Although I thought we we're on the same page regarding me taking these summer classes while we worked on the project, clearly we we're not, and it's better to risk having your teammate tell you ""yes I get it!"" in an annoyed manner because you're over communicating than to risk leave something uncommunicated."
"I worked at CNN last summer, where I spent a large portion of my job dressing articles for the online site – that meant embedding links, photographs, galleries, videos, and related articles for several pieces a day. (This furthered my great interest in user interface design, even on a site that's not terribly technically advanced at all. I was constantly concerned about the user experience.) On an article about the Great Barrier Reef, I had accidentally linked one segment to an article about Cardinal George Pell's sexual abuse – it sounds like a trite or mechanical thing to be wrong about, but it's actually a grievous mistakes, especially when the article was posted to Facebook, and many readers (esp. anti-CNN ones) opened it and realized the mistake. I realized quickly, in my first weeks there, that there are actions beyond just moral issues that implicated those around you...especially when it comes to the user experience online, on a site that millions of people read. I was so careful and cognizant going forward. This incident makes me think of not only the intended user experience, but also the one that occurs as a result of non-intentions. "
"To speak to this prompt, I would like to share an experience during my tenure as the Interfraternity Council Vice President of Finance. As the governing board that oversees all 11 fraternities at Columbia, we have worked very hard to try to make the community better. One of our initiatives is to fund and install noise insulating curtains for all the greek brownstones to reduce the number of noise complaints.

However, due to the complex organizational structure at Columbia, it took me several months communicating with FSL (Fraternity and Sorority Life) and made no tangible progress. With the deadline of our funding application approaching, I decided to reach out to housing directly in desperate attempt to get a quota on the project.

This decision to bypass FSL led to several conversations with the advisor, who explained how the complex structure is designed to protect all parties involved and overstepping one might lead to severe consequences.

In retrospect, I think given the structure that is in place, there is little room for time efficiency improvements. But I believe I could have done better in the future by seeking more alternative options in the event of a timeline issue with the main option."
"Last year while working on an Artificial Intelligence project, my teammate and I came to a crossroads. We were in debate as to the best way to solve one of our project's problems. After a great deal of debate we went with my solution which after many hours of work I realized that my solution was wrong. We had to redo a lot of the work and it lead to a multitude of hours being spent on an incorrect implementation. This helped me understand the importance of working through a problem on paper with a team member before implementing it. It was not a waste of time but a learning experience for me and I hope I can continue to use this newfound understanding in future projects."
"I am currently taking COMS 4160  (Computer Graphics), and on a recent assignment I had an incorrect understanding of a concept. What I thought was the proper way of going about shading calculations was actually wrong, and I ended up with incorrect output. However, upon looking at the homework solution afterwards I fully understood the concept and was able to implement shading calculations correctly and without any issues on later assignments. "
"This is not a single moment, but a common reoccurrence in my life...  I tend to be prone to losing things. My phone, my wallet, my keys, you name it I've probably lost it at some point. To combat this I've made it a habit to label EVERYTHING with my name and phone number  (My DYMO might be my most prized possession), I've purchased a number of tracking devices and keychains (Tiles, Trackrs, Apple Watch that help me to quickly locate my keys and wallet). I've also become very familiar with find my iPhone. I've trained my brain to always look back when stepping out of a train or car and I've overall become more organized make sure everything is in it's right place.  Thankfully over the last few years I've had no major losses due to these precautions, I can also thank the kindness of strangers who've actually returned things to me... restores my faith in humanity every time."
"I am currently taking ASE and is working on an actual project for the first time, and we are using git as the version control system. I have been avoiding to learn thoroughly about VCS because I feel like it is somewhat weary and not worth it - till I accidentally pushed uncompiled code to code freeze branch before project demo. Luckily we solved it but the price was a whole nighter. It (finally) made me realize the importance of VCS and it's key role in software development process - you can't always keep track of everything in mind, especially working in a team environment."
"I once set my alarm time for PM instead of AM, and ever since that day my phones time is in military time so that does not happen again."
"Out of the many, many classic mistakes that a young Columbia student makes, one of the first I ever made was on the first night of orientation. I grew up in New York and have always felt really lofty about my knowledge of the infamous subway system, in terms of train times, routes, service changes, and sleeping on another passenger without them knowing. But that all changed that night. A bunch of freshmen on my floor had gone downtown to explore, and on the way back up around 11:30 pm, I corralled the group to take the 3 express train instead of the 1 straight up to Columbia. My roommate indicated a very faded service change poster but I waved my hand and we boarded. In the midst of us talking, we didn’t realize that the train entirely missed Morningside Heights and went all the way to 148th, smack in the middle of Harlem. When the train conductor announced the end of the line, everybody broke out into a frenzy of fear—they had never been in Harlem, and had only heard terrible stereotypes about the area. I tried my best to tell them it would be fine and their preconceived notions were misplaced, but I realized that it’s tough to convince somebody to not be afraid of something they don’t know enough about. The best way to eliminate fear and reduce prejudice is to show them why they’re wrong. So we walked all the way through Harlem, down to Morningside, and it was absolutely fine. We all took away different nuanced memories from that night, but I learned that I should always be cognizant of people’s inputs, because I just might be wrong—and it’s okay to admit that. "
"I have been wrong while working on some of my programming assignments before, specifically because of messy and unplanned coding on my part.  For example, on a programming project for COMS 4111, Intro to Databases, I declared a primary key incorrectly for a project and spent an hour failing to realize why my database queries were not coming out the way I wanted them to.  From these kind of experiences, I have learned the importance of having a clear plan in mind before approaching a problem and also executing it in an organized way.  "
"At a recent Hackathon, I was in charge of getting an API to work with our web page. Since I was new to front-end programming it took me a bit of time. I found the API on google and tried to make it work with our interface. My teammates (whom I had met that day) were relying on me to finish this part. The only time I’ve worked on teams were at hackathons. I was trying to solve my issue, while my lack of progress intensified my anxiety. I was a point I commonly face in CS where I’m so sure what I have is right, but obviously it isn’t if it’s not working. Eventually, with the help of a teammate we realized it was in the wrong place. It was embarrassing how long it took me to realize this, in addition to asking for help. It gave me better insight into efficient teamwork, and when I should admit that I need a second hand. After that, things moved slowly but surely and by the end we got our app to work.
"
"There was a time when my teammate and I had a task to design a system for a specific scenario. Because of some personal stuff, I don’t take too much serious about discussing what we plan to do and how we collaborate to finish it. Later on, we found that we did the same thing which it’s not efficient enough for the whole period of app development. So after that, I always try to first communicate with my team members and know what to do in the next step. It turns out that it’s worthwhile and somehow necessary to do."
"During sophomore year, I declared my major as IEOR as I assumed I would love to work at the intersection of finance and technology. However, after taking a few courses in the department and interning at a consulting firm over the summer, I have realized that I'm solely interested in Computer Science and not in finance. I learned that you should never be too invested in anything until you get to experience it first hand and there is no shame in following your heart."
"I was thinking that put all my time in doing one thing would help me to make a great progress. Finally, I notice that sometimes inspiration is needed and it usually comes from other parts of our life."
"Prior to being accepted into Columbia University, I attended a community college where I took their version of Advanced programming.  During the course of the class, we had a group project which was to design a travel reimbursement program, and I was in charge of the travel expenses and hotel meal reimbursements. At this time, I was pretty new to programming, and my group member pointed out that I was returning in a void statement, when my group member was supposed to use the returned value in his portion. I corrected the mistake and I never made the same mistake again."
"Frankly speaking, this may not be a big problem, but I really learnt a lot from that, and this mistake help me build good habits. 

This happened in my sophomore year, right before final exam. Back to that years, I did not realize the importance of file management and backup. My computer broke down in system update, and all my files were gone, including the final report I just wrote that afternoon. That was a nightmare for me to recover what I have spent a lot of time on. 

After that, I learnt two things: firstly, always keep a backup, no matter how small the modification is, because nobody wants to do a same thing for two times; secondly, delete all the trash in time. Never mess the useful documents with the trash. I so seldom organized my files that there is always limited storage on my disk, and this eventually led to the failure of that system update. After that mistake, the management of files is the last thing I do before I go to sleep every day."
"After I missed that deadline, I created a spreadsheet for all future projects that showed everyone a project snapshot and clearly indicated deadlines and where we’re at in the process at any given time. Since then, I’ve never missed a deadline."
"Freshman year, I thought I could do everything myself. In high school, I was used to working by myself and I thought the same habits could apply when I got to college. However, I quickly learned that not every concept will be clear to me at its first instance, and that's okay. Now, I'm not afraid to be fearless and ask for help and working together in study groups.  It's okay not to know everything by yourself. There are many resources that I can turn to and over my semesters here I have had the privilege to use them."
"In my early days during my professional experience as a software developer for Goldman Sachs, I missed a deliverable deadline and failed to communicate this to my managers in time. I still had to compensate for this by working extra hours. Since then I have always ensured that I complete my work on time, and if not, ensured that I communicate my difficulties to my immediate supervisors so that they are not caught off-guard."
"During a project for a class I took as an undergraduate, I was sure that since I had more experience with C I had the right implementation of Depth-First Search in the kernel. The code kept breaking, and I didn't ask my teammates for suggestions as I was sure they would not be able to help. Finally one of them offered the correct solution, and from this I learned to ask for help earlier when struggling and not assume that others would not know better than I would"
"I was always reluctant to ask doubts/queries because I felt that it would make me look stupid and that people will judge me. But, while working on my Google Summer of Code project last summer, I had to post queries on mailing lists of the project that I was working on and to my surprise, people were very helpful and humbly answered all the queries that I posted."
"I got bad score in midterm. And I found that I need to do better in my time management, and when finding any problems, I should consult others for solutions in order to cut down the time I spent on thinking the problem by myself."
"During my undergrad, I had this mindset that its not possible to have a decent social life along with maintaining academic excellence. I chose to focus completely on courses. But I've met people who did both by prioritizing things efficiently and as a result have a lot more life outside classes, proving that it is indeed possible to do both. I regret my decision. I now see back and wish if I could have been involved more in public interaction and thus built a better network. I am trying that during my graduate time here."
"When I decided to pursue my interest in design, I immediately thought “graphic design” and completed a summer course at Parsons School of Design. Having already studied painting and drawing at a high level at RISD and at Columbia, I assumed I would enjoy graphic design as a first step into the design world. However, I was completely wrong and didn’t enjoy designing logos or typography. I realized that I was more interested in understanding the “client” and how to translate his/her intentions visually. Given my psychology background and my specific interest in judgment and decision-making, I am particularly interested in how people interact with design and how different design influences perception and behavior. Thus, although I was wrong about predicting I would enjoy graphic design, it led to me figuring what kind of design I do want to pursue, so I do not regret taking the course at all! "
"One time, I was writing a migration for a particular issue I was assigned. It had to deal with legacy code. Although I initially thought the migration didn't affect other parts of our application, after it was merged, the current product we were working on could not load because I did not edit our newer database. Something important that I took away from this experience was that I should not make any assumptions that everything works the way it does right when I finish writing my code --- I should extensively check for edge cases and look at the different parts of an application/at the whole picture. Even though my migration did what it was supposed to do, I didn't pay attention to a one line change that affected other people's work. Communication and a greater attention to detail were two key concepts I learned from this. "

"Speaking purely on the subject of design, I was very incorrect when designing an app for film reviews. I gave the app to a professor for review and she ripped the design apart. She took apart almost everything about it, citing the discoverablity of features as one of the main design flaws. I quickly realized that I had made the app for myself, not for a user with no prior knowledge of how it worked. It was especially hard to swallow since before turning it in I was under the impression that the design was beautiful, simple, and easy to use. The experience made me realize how important design principles are in tech and how much I have to learn about them."
"For one of my coding interviews, I practiced for a few days and looked over the complicated questions that I might face. I was confident enough in my coding abilities that I didn't feel it necessary to go over the basics and trivial methods. Turned out, I was able to come up with the pseudo-code but not the full implementation. From then, I always devote way more time to brush up the basics and start early to have a better preparation."
I was recently  wrong in assuming that a Christian friend would be very judgemental and not accepting of my sexuality. But I was wrong and she was accepting. I learned not to assume things about others without actually experiencing concrete information or responses . And that even if someone has a negative response they may be open to a conversation about how that impacts you. I think this is very important in Trump’s America .
"I am most frequently wrong in relatively benign situations that depict gaps in common knowledge. For example, until eighth grade, I was under the impression that the Hudson river flowed through Massachusetts. I thought this because in sixth grade I went on a duck tour in Massachusetts and I thought the tour guide said we were in the Hudson River. From this I learned that I should double check sources and not always take things at face value."
"Last year, I was working on a project called Duet at an accelerator at MIT's Sloan School of business with my teammates. Everything over the summer was going perfectly and we were on track to launch our product in early January. We piloted our MVP and customer feedback on our project was excellent. 

I was excited for what was ahead but lacked the foresight to see how things would end up. We all lived in different areas, so once we went back home our project starting fall apart. Our lead engineer, who was still in high school, felt that the startup was unlikely to succeed given we were all far apart and decided his college applications were his priorities. Another co-founder made promises to help us to continue building partnerships, but the distance proved to be difficult for accountability issues. I tried to keep things in track and figure out how to reengage my co-founders, but ultimately failed at this.

One of the biggest things I learned is it's crucial to understand early in what makes every person tick. After this incident, whenever I work on a team project I try to understand each person’s underlying motivations and goals. 
"
Don't take 7 courses in the same semester
"I went to my first hackathon during my freshman year of high school and was convinced that the project idea that one of my teammates had would be too difficult, too unnecessary, and not worth our time. I was outvoted by the other members of my team and we ended up creating a really cool product which I still talk about to this day. After this experience, I've become more openminded and ambitious with the projects I attempt. "
"At my internship last summer, I was asked to pull records from a database and run an analysis. I was assigned it on short notice, and asked to complete it as a higher priority than the  rest of my work. In a rush, I made an assumption about the data that majorly skewed the results, and then proceeded to deliver the skewed results to my boss's boss. Both were frustrated with me. Though one takeaway was certainly that I ought to pay more attention to detail when in a rush, I also learned about how I respond to negative feedback. I have a tendency to shy away from confrontation and take any blame, rather than explain the thought processes that led my to my mistakes. I learned both about noticing when I'm rushing/missing details, as well as the value of being self aware when receiving feedback,  and then trying to convey what led to issues whilst taking ownership for what I did wrong. "
"My most recent memories of being wrong about something have always been when I don't listen to my gut. During my junior year I secured at internship at Etsy that was supposed to begin in June 2017. About a month before the internship was supposed to begin, I started hearing news about management changes and employee layoffs. Yet, I thought to myself ""oh, nothing will happen to me"". I think it was definitely my mistake to not be more aware of how companies work and  not be aware of current events and how they will affect me. Yes all the interns, including me, were actually fired 2 weeks before our start dates. While I was somehow able to land another internship, I think I'm much more mindful and vigilant about what's happening in the tech industry. Within the scope of my education here at Columbia, I've enjoyed the protection I've had as a member within this institution and as I prepare to join the working world, I've realize I need to be more perceptive of my opportunities and my life decisions. "
"At my last internship, I was tasked with increasing campaign efficiency by 8%, but fell short of that goal. I tended to just dive into rushing towards a goal, without make a concrete, organized plan first consisting of small steps to reach that goal. I learned that if I had communicated my roadblocks more quickly to my superiors, I would have reached my goal sooner. "
"Last week I went to the New York Passport Agency downtown to pick up my passport on Friday, November 10. When I arrived, I saw that the agency was closed because it was Veterans day. I then realized that I wasted a trip downtown and two hours of my time. I learned from this that I should always check if where I want to go is open before going there, to not risk the trip being a waste for whatever reason. Essentially, I learned that I need to plan better."
"I used to call library when programming without understanding the principle of it. Last time in Prof. Stein's Analysis of Algorithms mid-term, there was a sort algorithm problem which requires us to solve in O(n) time. I didn't think twice, and just use hash table, which turned out to be wrong, as Prof. Stein explained it later. We shouldn't use any algorithm without getting fully understanding towards it or implement it by ourselves. That it a lesson I learnt from it. "
"Visiting home again for my birthday, my girlfriend and I made the rounds of people I knew to say hello. She had had a negative impression of one friend of mine, of whom I had a very close friendship during high school. Although I knew he could be abrasive, I held a high opinion of him. Meeting back up with him was embarrassing; the people he has fallen in with have had a negative effect on his judgement and his health. Although I can't say this without reminiscing on my own shortcomings in similar regards, it was a plunge in esteem that I had not expected. People change, and those around you affect who you become, the tendencies you acquire, and the standards you hold. I have to surround myself with people who I believe to push me, people who hold me to a standard I struggle to meet, but who inspire me to attain that level of quality in my own person. "
"I spent a while trying to use a Java framework the wrong way over the summer due to a version mismatch. I had written a mountain of hacky solutions to deal with it, but I was still convinced there was a better way to do it. There was, and when I redid all my work I made sure to read the documentation for everything. It turned out well, and I realized it was actually a pretty elegant framework. "
"I taught myself web development through hackathons and side projects. In the process I developed a unique way of programming that in many ways proved to be detrimental to the projects I was building. I had a strong dislike of development frameworks, preferring instead to build out self-developed APIs from scratch using pure HTML and Javascript (and some jQuery). 

At PennApps in my sophomore year, one of my teammates finally sat me down and told me that I was programming the dumb way. He pointed out that I was reinventing the wheel, and introduced me to powerful libraries like Angular, Express, and Socket.IO. In addition, he encouraged me to look into front end best practices and to rethink how I program in JS. Once I realized how much time I was saving, I picked up his advice and dropped my preconceived notions about how to program. "
"I am the president of the Columbia Photography Association. Recently, my board and I decided to host a ""photo critique"" workshop. After following through, we soon realized that the title ""photo critique"" was too intimidating and inhibitory for beginner and intermediate photographers, thus resulting in low turnout. Through this experience, I learned that empathy and ""imagining yourself in someone else's shoes"" are crucial skills for any kind of project aimed at a specific target audience."
"When working on a sensor project, I thought that because our data wasn't a perfect proxy for what we were trying learn and we sometimes had holes in our data due to cellular connectivity issues, we would not be able to use it. But it turns out that you can take something imperfect and still find ways in which it is valid and useful without ignoring or hiding it's problems."
"I have currently been working as a software engineer at Financial Partners Capital Management, building the back-end of a certain service that would communicate with the server we were pulling our data from. My direct supervisor who was a finance guy,  was telling me  to do certain aspects of the project in ways that I didn't think made sense from a programing point of view. However I was wrong and I learned a true lesson on academic modesty and the dangers of thinking inside the box. "
"During one of my internships as a software engineer, the server cluster in my team suffered from a small-scale break-down due to my false understanding of the infrastructure that we used, which led to a small but fatal programming mistake. What I learned from this is that whenever you are learning something new, always make sure that you really understand it instead of having a shallow idea and starting to feel good about yourself."
"I have made tons of mistakes. I don't know which kind of mistakes this question wants to ask for. In my opinion, the biggest mistake I made is selecting wrong major in undergraduate school, which suffered me for 4 years. Fortunately, I made a correct choice while applying for graduate degree. This experience teaches me to select major I really interested in."
"When I was building an app 'Overcast' with a friend to help users encrypt their facebook messages , we spend a great deal of time on the design and UI of the app. Because we were essentially building off of an existing website, we did not have that much freedom, but I still took every chance I got to add in a new feature when I could. My partner tried to convince me that the app was getting too cluttered, but I was sure that the features were worth it. In the end, when running it by another person, they immediately said they had no idea what was going on because the thing was so cluttered, and I quickly learnt that having an extremely capable product is essentially useless if the user does not have intuitive access to those very functions! It was an important lesson to be sure, and I look forward to learning more like it in this class."
"In my position as a data analyst, I once gave a presentation on slides I had not prepared myself. Because I had not prepared the slides myself, I wasn't able to effectively answer any in depth questions. I simply stated that I didn't know because I did not create the slides. I was wrong to not research the information beforehand and this error proved a valuable lesson. Now, anytime I reference, produce, or present anything, I take full ownership of the subject. Regardless of where the information comes from, if I am using it, I must understand it at its source."
"Several years ago, one of my roommate has an iPad and he was pleased to lent it to me. However, one day he was not at the dormitory, but I still used his iPad without his permission. After that, he felt quite angry because he thought I should have tell him. From then on, if I would like to borrow something from someone, I know that I have to inform that person. If he is unavailable, I should wait for his response because it's his property."
"First semester of college, I was dead-set on studying computer science while fulfilling the premed track.  My rationale for doing so at the time was that I had done mostly biology and chem related extracurriculars up to that point, while I'd never done any work in computer science before I took 1004.  It felt safer (I told myself) to be able to ""fall back"" on the premed track but leave my options open by studying CS. Thankfully I made the decision to drop premed-- from this experience I learned that commitment is the first step to success-- by leaving too many options open, I was ultimately shooting myself in the foot by initially doing not-so-well in both areas since they are so disparate."
"I worked on a project to output sets of potential grades a student can get in order to attain a desired GPA. I was excited and overly ambitious initially, wanting to consider the best case first and looked only at the end product. A teammate reasoned that we should consider a smaller subset first and work our way up instead of complicating our progress with a complicated big picture. I learned to slow down my thinking and consider different approaches before starting a project, and realized the influential power of teammates."
"I work at BCIT and found out a few weeks ago that I'd been giving students an incorrect answer for a rather commonly asked question. I learned that even though I am one of the more experienced students employed there, my assumptions and instincts can't always be trusted, so asking for help from a coworker or supervisor is often a good precaution."
"I took a ceramics class in high school. I spent weeks working on a massive coil pot. One day when I was nearing the end of my project, I decided I didn't need to wrap the pot in plastic anymore because I would be finished with it soon enough that it drying out wasn't a problem. As I was leaving the classroom that day, however, my ceramics teacher noticed my pot wasn't wrapped and told me that I really needed to wrap it. She said it would dry out more than I expected and possibly even crack. I told her that it was fine and I knew what I was doing, despite the fact that this was the first ceramics class I had ever taken. The next day I walked in to find my incomplete pot completely dry and cracked down one side, completely unworkable and thus unfinishable. I learned that professors, instructors, and other people placed in positions of direction or management are there because 1) I need help and 2) they are capable of giving it. I also learned, more generally, that I should be less stubborn. :)"
"When I was planning a charity event at my high school, as lead organiser, I thought I had to plan everything on my own and that most of the tasks would fall on me but I could handle it. Looking back, it seemed crazy to think that I could book event space, handle ticket sales, decoration and coordination of a band and photographer all on my own. I learned that it's ok to rely on other people and not everything has to fall on my shoulders. "
"When I was working as a Product Management Intern at a tech startup last summer, I was in charge of working on User Interface design for our company's Android platform. By then, I had extensive experience in using Android devices from personal usage, so I believed I understood everything about it, but it turned out that I was completely wrong. I didn't necessarily understand the complicated technical details behind the platform and hence learned to be more humble and learn from other people in my work environment. "
"This past summer I worked at a hedge fund. Among other things, I was responsible for typing up transcripts for our calls with investor relations. The first time I typed up a call, the analyst in charge emailed me back saying my work was atrocious. I had typed up the call full of commas, in a short hand style that I use for class notes. I wrongly assumed that he would also understand this type of transcription. I learned then the primal importance of knowing your audience - the purpose of typing up the call was for the analyst, not myself. "
I assumed that a Christian friend of mine would be judgmental or end our friendship because of my sexuality. I was wrong. I learned not to assume without concrete information.
"I was designing an iOS application that has similar characteristics to the Instagram design. I proposed to my teammates that we should aim for a design that is simple and clean-cut. More or less, my leaning towards minimalism led to a lackluster design. When my teammates and I presented the application, we received feedback that the design was not exciting. From this experience, I learned that clean design does not necessarily mean minimalism, and user testing is invaluable to the process of design.   "
"During my PM internship last summer, I thought I had a solid understanding of our customer base and what needed to be communicated to our UX designers to meet those needs. Feedback from my manager said otherwise, and I had to pivot. However, along the way, I gained valuable insight into the aspects that I had neglected to inspect before proposing the spec."
"At my internship at the Skimm, I was working on implementing a new feature onto our mobile application SkimmAhead. My role was to flesh out the features from a product management stand point and design the implementation and functionality. However, after I completed the entire product roadmap and presented it to the entire company, I received feedback saying that to build a chat feature requires a lot more thought and implementation than I originally suggested. Though I had a misunderstanding about what the requirements were and put effort into a project without understanding the scope of it, I learne when working on a project/feature that multiple teams need to be involved in, one needs to collaborate with the teams when coming up with the specs for the project. For example, if I had worked with the engineering team more thoroughly when planning out the features then alot of the features I suggested could have been simplified and thought out more to be made feasible to build. Collaboration in project and work environments is key to successful product building and execution"
"In the fall of 2015 my friends and I decided to enter a hackathon on campus called lionhack. We figured that it would be a good experience for some hands on projects even though we had only taken a few programming courses. We should have realized that this wasn't quite a typical hackathon from the start as it was hosted by the business school and seemed to be about 95% business students. We were handed out the instructions which consisted of a fairly general projection completion with a financial analysis side including a business model, profitability, marketing, and other financial issues associated with an idea/product. We saw these financial goals as periphery as we thought we could just develop an interesting app as that had been our experience at other hackathons. Throughout the 24 hours we developed a product called politckr which would improve upon finding less biased political views from college students and young people. The app was interesting, but it certainly lacked an extensive financial side--we had only spent about 2 hours working on that. As we walked into the judging room we all very quickly realized that the developing piece was truly the insignificant part, and financial analysis part the meat what the judges were looking for. The judges themselves were venture capitalists. Long story short, we got absolutely destroyed (I truly mean obliterated) for having a very lackluster business side to things, in fact, the audience was actually laughing at how pathetic our financial side was. Honestly, they were right, the competition we entered was clearly a venture capital competition hosted by the BUSINESS school. We had just glossed over that to focus on our supposed strengths. I learned that day on the true importance of orienting one's compass before just diving into the workflow. If one of us had stopped to look around and recognize that this fun and exciting project would in no way fit their criteria (which it clearly didn't) we would have been able to put up a much better showing. I am the kind of person who really likes to dive into to things, sometimes without enough thought. It saves a lot of time to truly orient yourself before starting a large undertaking. Now, whenever I start something large, such as my project over the summer, or even small such as a homework question, I very carefully outline my criteria and idea and make sure that they will not just match up now, but down the road as well. "
"A couple summers ago I was working at the Harvard Kennedy School with another intern.  It was basically just all summer.  We spent a lot of time talking about tech and business, and for early on, I found myself being proven wrong on most things we argued about. I had a lot of opinions that were more or less read and taken in stride.  He made me really start making myself test if I really understood something, or if I just had a good sentence or two to say about it without any depth.  So, lessons learned: 1. routinely trying to explain things to myself or other people to poke wholes in what I know 2. starting from first principles as often as I can"
"I'm am currently working with a team on a Hacking 4 Defense project (COMS 4995). We are creating a tool and the whole process is trial and error - after a few rounds of interviews we found out the the first MVP we were building wasn't directly answering the problem. After further investigation we realized that the best way to approach the problem was to focus on many different types of users and not only the higher ranked users, in order to create the perfect solution that works for all ranks. "
"When I was in high school, I applied to Columbia as a music major, convinced that I would either major in music or English. All my life, my parents had tried to steer me into math, physics, or computer science, but to their detriment, all that did was to make me avoid those subjects like the plague.

It wasn't that I didn't inherently like science and engineering; I was surrounded by kids who I thought was much smarter and talented at engineering than I. I thought I had no inherent talent at engineering, would never survive classes, and wanted to study areas where I thought I was talented. 

In fact, I probably would've majored in English or Music had it not been for one event; I attended a computer science club meeting at my school on a whim. No, a love for computer science did not suddenly blossom there -- instead, I was met by a group of rather unfriendly male faces who scoffed at me, a girl with no knowledge of CS intruding upon their territory.

I came away from the meeting feeling a bit sad and extremely indignant. At that moment, out of indignation, I decided to create my own club; the Technovation Club, where I gathered female students who had never coded in their lives. The Technovation Club would, I hoped, be a space that was encouraging and inclusive to its members who felt intimidated by computer science like I was. 

Although we members of the Technovation Club never won any awards, we were proud that we had tried our best to learn. As I took introductory computer science classes at first, my local university, then at Columbia, I started to realize: people only became skilled at something because they spent a lot of time and energy learning the skill. Because I spent a lot of time reading and writing in my childhood, of course I was a fast reader and a good writer!

The more time I spent learning the fundamentals of programming, the better I inevitably got. Although I still find CS classes at Columbia difficult, and frankly, intimidating, I now realize that time and effort will lead someone farther than what we call ""talent"". I still love the arts and hope to integrate them with my technical skills. Throughout college, I've continued to create music, and this hobby, along with figuring what I like in Computer Science, made me realize I want to explore creating digital media content for users. "
"The first answer jumps in my head is debugging. No one likes bugs but as we go through the debugging process, we will have a deep understanding on what mistakes we made so that we could avoid that mistake next time. Generally, we are making mistakes every day and I am glad that I always learn something by fixing it."
Once I thought doing well in one specific field will help me get a job but ended up figuring out that there's way more expectations from the employer side.  I used to be focusing only on backend development but now I am eager to explore more about front end development tools.
"I've always been one to multitask and to immerse myself in an array of activities. Coming to college as a freshman, I did the same thing with challenging classes, internships and clubs. However, I soon realised that I was trying to do too many things and no matter how organised I was, I couldn't handle being a jack of all trades. I learnt that I had to choose and prioritise in order to give each task sufficient time and dedication. Now, I am able to dedicate myself fully to each class I take or each activity I participate in. "
"Sometimes I don't quite understand or misunderstand the assignment, and start working on it. After I try something I think relevant, I became familiar with the environment and the project and then I get on the right track. I think the important thing when unsure about something is to talk to somebody who's also working on it. It is okay to start trying some small things but working on something big that turns out not useful is often time consuming. "
"Whilst taking operating systems my junior year, I worked in a group of three to complete all of the group homework. During these homeworks, there were several times when I either encountered situations where I was wrong because of an incorrect assumption I had made, or I had misunderstood a concept, or because there was a failure in communication within my group. What I learned from these experiences, was to be more open minded and to speak up when I have questions or concerns. By doing so, by the final homework my team had much better coordination and also more success through discussion. I am an outgoing person with my friends and those that I know, but in new situations I can be a little bit shy. This experience challenged me to speak up sooner, and I am looking forward to also challenging myself to speak up and participate in class. I like to participate in discussions and both share my own and listen to opinions of others, and it was this experience that taught me just how important that is. I especially feel for UI design just how important that would be, because it is not just the hidden underlying software, but what users have to interact with."
"Life is full of mistakes. When I was new to application development, I always made things too complicated at the first stage and then spent a lot of time debugging. What I've learnt from it is that we should first make up a frame and then add features little by little, and at the meantime we should keep testing the new features."
"During my service in the Israel Defence Forces, I was part of the R&D team for a highly classified software. At the time of combat, our software was the main communication tool between commanders in the fields and generals in the command posts. The consequences of malfunction in our software meant loss of soldiers lives in the field. It was the days leading to a very important operation by the one of the IDF commando units outside Israel borders, and I was in charge of the software new feature testing. After starting to work I was lucky to find out in time that I was wrong about my estimation of schedule of testing. I communicate my problem to my commander and together we worked out a new schedule and plan of testing so we can successfully deliver the best quality product to the field and avoid malfunction in real time. As a result our software was successfully deployed in the field and the operation went smoothly with no critical problems or downtime. From this experience I learned that if one finds a problem in the process or that their approach is wrong, it is never too late to stop and reassess. I learned that failure is multidimensional, and a process towards success."
"During a summer internship, I was working on a project which introduced me to new technologies and concepts I had yet to encounter. Out of a great will to prove myself, I took on more tasks than I could handle and attempted to compensate for my lack of knowledge by learning multiple technologies at once. As a result, I couldn't meet my first deadline. I realized that my biggest mistake was that I did not report on open issues to my managers soon enough and that I should have admitted I was struggling to keep up with all the new tools I was using. 
Further into the project, I learned to manage my tasks more accurately and report on issues I found hard to handle alone. I understood that by reporting to my managers on time, they could better understand my progress and assign other colleagues to help me out with certain tasks."
"I have directed two productions for theater and the first one was Jumpers by Tom Stoppard in spring of 2016. The experience of putting on this show was filled with ways in which I was wrong and had to learn how to be better. Though, one of the clearest ways was in the what I imagined would make a good show. I thought that the singular thing which I needed was to have a big idea at the center of my project. I built on this concept of modern politics being performance and spectacle without substance, researched heavily and thought that supporting that would be the focus of my show. But there was one thing I forgot about in all this: the people! I rather quickly realized that I hadn't considered what people on the wanted to work on or would even understand. Even more importantly, how I would get them on board for my big vision? When rehearsals and meetings with designers started, I took several steps back and found out what they took from the text, what interested them and what their talents were. I began to let the style of the show build more naturally through these conversations and found everyone understood their parts and took ownership rather immediately. Through this all I learned a lot about creative leadership and how much of it centers around giving the talented group I have brought together the space to be amazing."
"I work as a full stack developer for a startup. Because of the small size of team, I need to do the user interface design as well. But at first, I knew nothing about that, so just trying to find some great UI on Pinterest and other websites. Latter, I find that I am wrong. Because in most case, I need to analyze what should my page display and then try to arrange the components on the page. I am very eager to take this UI course, because I think being a full stack developer you not only need to know how to code, but also need to know how to design!!"
"Two semesters ago, I was in a Computer Science class that had a final group project where we were to be in groups of four. After evenly splitting up the workload and starting to work on the project, we were, for some reason, not able to upload our project to GitHub in the way we usually did. We thought that we would be able to handle this by just keeping the main project on my laptop and having the other team members write pieces of code on their own laptops and send them to me so that I could integrate those code fragments into our project. The integrations ended up being not as straightforward as we had originally thought and, consequently, I ended up having to do the majority of the project myself, since it was on my laptop and there was no good way to split up the work so that team members could work on the project in their own time. Looking back, I would have invested more time in learning how to upload a project of our type onto GitHub, as it would have made working together on the project later much easier. I learned from this experience that it is not only vital for team members to split up work evenly, but it is also important to establish early on exactly how this splitting up of work can be made as seamless as possible. "
"I used to think that the content is the most important part of work. However, when I did not receive good response in my presentation regardless I did lots of work, I noticed that skills in user interface design is really important."
"I used to be opposed to using Linux operating systems on my undergraduate institution's honors lounge computers because they seemed more difficult to work with, but once I began using Linux more, I really enjoyed the control I had. I was just scared of change. I have learned to be more suspicious when I feel too good (that is, elitist) for something unfamiliar."
"During one of my journalism classes I constantly felt as though my story idea was not good enough, as the professor picked it apart. However, I learnt that I had all the information in my story it's just the way I was presenting it that was wrong. He taught me how to restructure it. "
"Last summer, I worked as a product manager at a fast-growing fintech startup in San Francisco. The company is well-known for its digital mortgage platform, which allows some of the top banks in the U.S. provide a frictionless mortgage experience to their customers. During my three month internship, my job was to launch the company’s first new product: home equity loans. I was determined to have the product live in production with at least one customer before the summer was over. Moreover, I wanted it out as soon as possible. I worked like a madwoman, taking on tasks outside of my purview, to get things ready. I had incorrectly thought that the sooner, the better. However, when the product was finally ready to launch with our first customer, they weren't ready for it. I had blindly been pushing the team to get the product out without making sure that our pilot customer was on the same schedule. Consequently, I had to channel all of my energy into helping the customer get up to speed instead of monitoring the launch of the product. This taught me several things: 1) A product is nothing without the customer. You can slave away creating something wonderful, but it's not complete until it is in the customer's hands. 2) Think carefully about what you are optimizing for. Clearly, I was optimizing for speed, but for no good reason other than my own competitiveness. Instead, I should have been optimizing for usability. These are lessons I will take with me into my future product development efforts."
"When I first came into web application development, I though the most efficient way to be the most productive developer is to learn the newest tech stacks which are the best solutions for now. But then after I explored plenty of frameworks and concepts, I realized I made two false assumptions at once. The newest solutions might not be the best solutions in terms of completion level (solve one problem effectively but not for the others, especially corner cases), community maturity (the number of active developers), etc. And my colleagues may not want to invest their time in new stuffs so I can only be more productive on my own using the new solutions but not in a team."
"I was hired by a small medical office to develop a technical solution to solve a problem they were having with patients. Patients were forgetting their appointments and not refilling their medicine. Automatically, I thought “you need a mobile app.” However, even after deployment of the app, the numbers were not increasing. Patients were still missing their appointments and there were not many app downloads. After doing a careful study and analyzing more data about the patients’ technical adoption behavior, I realized that a mobile application was not the best solution. Instead, a simple Twilio SMS chatbot would suffice. Most patients either did not have a smart phone, used a government issued flip phone, or did not know how to use the app properly. I learned that sometimes the simplest can sometimes beat the most innovative. While it is good to push society sometimes out of their comfort zone to try new technology, I now strive to build solutions that are better suited for the end user. "
"I started wanting to do Computer Engineering, then changed to Computer Science, I learnt that I had to cut my losses and move on into a field that interested me. It is better to change your mind, change course and keep on, than going the wrong way and never stopping to see where you are going."
"During a summer internship at a startup, I had to give a presentation on the functionality of an application that my company was going to use for their product. Unfortunately, I didn't do my research properly, and falsely reported on how to use one of the commands. Specifically, the information that I gave was for a version of the program that the company didn't use. When I discovered this a couple days later, I sent out a Slack message to everyone apologizing for my mistake and explained the correct way that it worked. I also updated the summary that I compiled and sent out during the presentation. From this experience, I learned to always double-check and test everything in computer science, and to not blindly rely on documentation that might be out of date. In addition, I learned that team communication was vital as soon as you realize that something is wrong, so that everyone is up to date with recent changes and can adapt to the situation. "
"When I was software engineer intern @ Cisco, I once participated in a cool project as a full-stack engineer (responsible for both front-end and back-end), we    
 designed and implemented great features but received need-to-improve feedback about user interface design / user experience design, which made me frustrated. That made me awared that the importance of UI/UX and started to learn how to make better user interface."
"I forget exactly what the argument was about, but the end result was that I learned that just because I am right doesn't mean someone else is wrong. I also realized that this applies to CS - there is no one right way to do things so it's best to keep an open mind. "
"As a kid in Georgia, I took up a hobby of piloting remote controlled airplanes. A man named Keith let me hang out and on his property and fly around. One day, as I was flying over a grassy field near a lake, he told me 'I bet that you can't do a tailslide' With nothing to lose except my masculinity, I turned the airplane's nose to the ground and began picking up speed. A tailslide, the attempted maneuver, would have involved a suddenly rising sharply, stalling at the apogee, flying backwards, and leveling out, had both of my wings not fallen off. The airplane continued downwards through two (much denser) oak trees and smattered into the lake. For hours, I picked up pieces of balsa wood with a pool net. That day I learned about shear stress forces and machismo. Years later, Keith hired me to make his website. I began to teach myself Node, MongoDB, Handlebars, React, Gulp, and Webpack. The project lasted a painful four months. That day I crashed my plane I should have learned to take things little by little, but I did not. I still have maybe not learned this but I did learn how to work with React. "
"Recently, I was walking back home with my 3 year old on my shoulders and she says to me: ""Look Papi, a Jeep!!"" (She has a thing for spotting Jeeps on the road). When I looked, I didn't see one so I assumed she confused it with another car and told her that it wasn't a Jeep, that she must've seen another car. She insisted though, and when I looked again, sure enough there was a black Jeep across the street. I apologized and pointed at the Jeep so she would know that I saw it too. I, once again, learned not to make assumptions about ANYTHING."
"I was wrong about my best friend at Columbia. When I first encountered this person, I had a rather negative first impression and for a short time actively avoided this person. We ended up in class together where I quickly discovered how mistaken I was about this person. I could’ve very easily never gave myself the opportunity to make this friendship because of making passing quick judgements so now I do my best to have an open mind when I meet new people and give myself time to get to know the person. "
"Every Korean male has to do Military service for around two years. And most college students do this service after freshman or sophomore because these periods are being considered most appropriate time to do the service. 
Two weeks before entering ROK Army, I really didn't want to go so I delayed it and took one year gap. Many people and even I thought that I just wasted one year. However, I met my best friend in ROK Army that I joined one year later and then decided to study in USA following him. This led me to come to Columbia and study Computer Science."
"I thought class group project was done by everyone in the group equally, but that was never the case. Everyone was not in the same level and everyone had their own schedule. So group management with early start is the most important thing I learned from class group projects."
"When I worked at Sprinklr in the summer of 2016, I missed a due date for one of my projects as I failed to communicate with my manager that I was having software issues, and this caught her off guard.  From then on, I realized the importance of communicating immediately with team members if a problem arises or some other obstacle stands in my way. This was especially helpful for my term project in PLT, when we built our own language, as there was constantly issues we needed to fix in order to have our presentation done in time."
"Recently I caused a panic because I had a wrong understanding about Google Drive. The shared folder in Google Drive exists only as one instance, instead of what I had thought of as a local copy. As I removed some subfolders that I didn't need from the shared folder, other people lost track of their files. I attempted different ways to restore the shared folder to the previous state but none of them worked out. In the end, we had to use a hard drive copy of the shared folder to resolve this issue. 
I realized that it's important to not take anything for granted. Having preconceptions towards something could be dangerous. When in doubt, it's better to confirm than act incautiously. 
Also, I learned that I could easily get overwhelmed when I tried hard to solve an issue caused by myself but could not do anything helpful. I should probably learn how to detach from negative experiences and move on instead of being bogged down in shame. "
Once I underestimated multiple projects that were due on the same time. I learnt to give up on some portions to get the majority of the credit
"I think learning computer science requires you to be wrong frequently. It is essential to learning practical skills that you break code and learn how you broke it. That's what debugging is all about! So I am wrong all the time, and I learned that it's okay to be wrong as long as I stay tenacious and learn from the error messages I get. To be specific, one time I kept getting the same error no matter what I did on a programming assignment in Programming Languages & Translators. I spent hours looking at the same line of code, asked my partners, and even asked the TA. We were all stumped. Turns out I just needed to recompile my code. I learned that painful day that computers are unintuitive machines, and it is up to me to make sure everything is perfectly aligned to pave the way for meaningful code. "
"Growing up, I never knew that I could rewrite my life script. I always thought that I was born into the person that I was and with the inability to change. 

Throughout my adolescent years, I was always socially awkward. As I continued into high school, I had trouble understanding others and conversing with them. However, college provided me with a new beginning after I learned about Charles Cooley's idea of the looking-glass self from my Sociology class. Cooley explains that our image is structured depending on how we think others perceive us. Cooley’s idea overlaps with the symbolic interaction theory as well, which expresses that if we define a situation as real, then its consequences are real as well. I was behaving according to how I thought others envisioned me. I realized that I was writing my script, but most importantly, I discovered that I had control over this script.

This pivotal moment led me to make the conscious decision of taking a Fundamentals of Acting course. This course inspired me to enroll in the following courses: Intro to Acting, Intermediate Acting, Voice and Diction, and Movement for the Performer.  I unraveled the causes of my insecurities by studying the art of theatre, embodying characters, performing on stage, participating in improv groups, and understanding human interaction, behavior, and movement. Through this process, I learned more about who I was and why I was that person. 

Today as I reflect back, I for sure know that my mindset was all wrong. However, most importantly, my breakthrough experience taught me that re-writing my life-script requires me to be conscious of the decisions that I am making at any given moment. Furthermore, I discovered that the more I get to know myself by applying sociology and psychology concepts, the better I can understand human interaction through the application of concepts to others.

Until this day, this is a practice that I use while approaching my photography work and designing UI/UX, as I continue to learn and be inspired by Psychology. If it were not for overcoming this obstacle, I would not have discovered the importance of being sensitive and observant to the people and world around me as a student studying HCI."
"During my Summer internship I was building a troubleshooting platform  for network engineers. Although my team and I designed an interface for the platform that was simple to use--we realized we only had a cursory understanding of what our users wanted to accomplish. This meant that although our solution helped users achieve their basic goals--there were no standout aspects of the platform that users were excited about. It was only after several interviews with network engineers and a more in-depth examination that we went back and incorporated some more advanced components to the interface that not only accomplished basic goals, but also included features that our users were excited to try and experiment with. Although my team and I were building a very functional product, we realized how important it was that we paid attention to how our platform provided unique features that got our users excited even while performing often mundane tasks (like troubleshooting network connectivity). "
"Over the course of my internship, I was completing a task in a slow, tedious, and inaccurate way, but didn't think of seeking help to correct my work. I learned to spot mistakes early on and also to ask for guidance and mentorship when needed."
"I was wrong in pursuing a certain relationship. I learned to take a step back, and take into account want I really want, and not what is assumed of me."
"I am working on a startup called coursedog.com that builds course selection systems for universities. At the beginning of the startup, I trusted my gut and experience from working at Facebook to make business decisions. But after three months of stalled progress and three-hundred re-writes of the copy on our website (as our business proposals kept getting rejected), I realized that there might have been something wrong with relying on my gut to make business decisions. After reading several books on startups, I realized that there was a formal methodology for building a startup (pioneered by the learn startup). Since that time, our business has become much leaner, we've just made our first couple of sales and raised 50K in seed funding. This experience of failure, research and then success made me realize that every decision should be grounded in data and rigorous research as opposed to fuzzy gut feelings. While emotion is important, i've learned that opinions are weak without data to support them. "
"I learned computer stuff from when I was 9 in China. At then, all I could learn was from books and practice. Of course I had been wrong about some concepts of computer because I had no instructor. Yet here I am, earning some A in this renowned major. I guess what I had learned from my wrongs is enthusiasm towards CS and never give up."
"Last fall semester was my first semester at Columbia and I enrolled in Intro to Databases with Professor Biliris as a junior.  I teamed up with a senior majoring in Operational Research who has this course as a requirement but has questionable programming skills if I were to be honest.  This project experience was far from pleasant at the beginning, and what we had was more like a teacher-student relationship than a teammate one.  But even with a beginning like that we ended up with good grades, as well as a final product that integrates our mutual interest in gaming and the database knowledge we learnt.  I also turned out to enjoy the novel experience working with people with less technical backgrounds, as they tend to look at things from a different perspective and are creative in a new way."
"There are many things I suspect I have been wrong about, but will never definitively know. During my previous job as an intelligence analyst, there was one instance where I had led a presentation from a set of powerpoint slides that were created by a colleague. Because I had not made the slides I did not know any extra details about the information I was presenting. When my audience had a few questions I was not able to answer them, I simply said I did not prepare the slides so could not answer the question. I was wrong to read the slides as verbatim without further looking into the information. This taught me the valuable less to be fully responsible for any work that I am involved in."
"During my last internship, I was assigned to write a data cleaning script to prepare data for sentiment analysis. Without communicate with my supervisor about the details of how the cleaned data should be, I began my work and submitted just before the deadline. Apparently, data cleaned by my script can not work with the other scripts. This caused our project delayed for nearly 4 hours. After this thing, I realized the importance of communication in teamwork, and I always try to communicate with my teammates as our project progress to make sure our work is on right track. "
"During the last semester, in the Cloud Computing course, I was working on a particularly tough assignment with my project partner. We spent more than fifteen hours a week on the assignment, which involved working with AWS back-end services and front end HTML and Javascript to produce a real-time, searchable world map of tweets. We were stuck on a particularly nasty problem, where accessing code variables in front-end Javascript from a Python Lambda function was returning very weird results. I spent two sleepless nights trying to figure out the error in our code, and after a 'Eureka' moment, it struck me. The parsing was supposedly not done in UTF-8 and so there were garbage characters in the JSON objects, and the quotes were being replaced by a different string of variables, which is why our webpage's Javascript could not access them. I fixed it and received great grades!

I learned that a lot of times, we spend an incredibly unnecessary amount of time trying to look at the specifics, and think about problems with their intricate details and convoluted meanings, but the beauty of computer science is that sometimes, its just a simple little thing that we overlook!"
"Last semester, we finished a project of one class and we just thought it OK although it could be modified better. Then, during the presentation, we found other teams' projects were quite awesome, far better than ours. This thing taught me a lesson to never think my effort is enough, and do as best as I can."
"Throughout high school and college I thought for sure that I wanted to work in fashion design. After graduating I worked for different designers and stylists, and I learned that fashion really wasn’t the right career for me. Although my design skills are solid, I became aware of how important mathematical problem solving is to me and of my need to balance out the stimulation of the logical side of my brain with the creative side. I realized I needed to change course instead of staying in an industry that wasn’t fulfilling me."
"During my first group project for another course, I underestimated the amount of communication necessary to facilitate productive group work. Deferring to my groupmates that I assumed had done group projects before, I eventually learned that it is important to step up and communicate, especially when I'm not sure of what's going on."
"I was wrong about the time complexity of heapifying. I thought it was O(nlgn) but it should be O(n). This was pointed out by an interviewer during an job interview, so it was a hard lesson. I learned that I need to really understand something in order to memorize it better. I was not very clear why that algorithm was O(n), but just memorized it. That won't happen to me any more."
"During my 2 year stint working at SAP Labs, I would initially under commit a little to work or slightly over estimate the time it would take to finish a particular job. I'd do this because I was scared that if there were some delay, even under some unforeseen circumstances, the customers should not be disappointed. However, this was quite wrong because our customers were not happy with the timelines and even if we delivered prior to our deadlines, they still could not roll out earlier because their plans were now based on our delayed deadlines. When I learned of this, I realized that under all circumstances I ought to be honest about by work and my estimates, and it is my duty to ensure I meet the deadlines by working harder later if I've slacked earlier. The customers would understand abnormal conditions for delays and they already factor them in for their go-lives. I'm now a staunch believer that honestly is indeed the best policy."
"In a teamwork project, I failed to finish my part on the time we have set, because I have an interview to do on that week. The problem was that I did not tell my teammates this, and they were still expecting me to do it on time. This caused problem for our project, and I am really sorry for that. I should have shared this problem with teammates earlier, and after this experience, I have learned the importance of sharing information in a team. "

"I used to ignore the function of JQuery, when writing front end webpage using Jade. I learnt from it we need to add functional click on webpages, using JQuery or functions in HTML called JSP page."
"Last week I went into the final round of Google's interviews for internship and got rejected a few days later. I was upset but at the same time glad that I learned a lot from the failed interviews, of how to communicate better and the importance of analyzing and solving technical problems faster. I will prepare myself better and try again next year!"
"When I was in high school, I tutored my younger system in english, at the request of my worried parents. I had always excelled in english courses, while my sister had experienced significantly more difficulty. While my sister could always talk about the books she read in class, she was never able to convey her thoughts clearly in written essays. During this time, I became very frustrated. I felt my sister was being lazy. If she could speak about books, why couldn’t she organize her thoughts into a coherent essay. I ultimately wasn’t much help as a tutor because of my frustration, which I attributed to my sister’s lack of effort. 

It was two years later when my sister was diagnosed with severe dyslexia, which was described as the root cause of her limitations as a writer, and as a student. 
To me, I look back on my days tutoring my sister with disappointment in myself, in that I should have known she had dyslexia. But obviously, I was not equipped to diagnose my sister with a learning disability, so there is no reason to expect me to have known that. In reality, I should have learned to read between the lines, to see that whatever was causing her shortcomings as a writer, I could have seen things from her perspective and provided tangible help. 
"
"When I did a research project during my undergraduate years. The project's goal was to use sensors do trajectory rebuilt. I went to the wrong way of using two sensors to rebuild the trajectory. I cost around 1 months to use two sensors but the accuracy did not increased compared with one sensors. Since we wanted to write a paper, I decided to consider add more fancy functions to our application, I combine CNN and Kalman Filter together to gain a rebuilt and classification in a series way. Then we finished the project before the deadline of the conference. I learnt from it I need divide my project into small steps, and check whether it works after each small step, rather than go into one way for a long time until finding it is wrong."
"Previously, I worked as a full stack developer, and think that to be a good programmer, I only need to know how to code. But very soon, I find that to be a good programmer, I not only need to know how to code, but also need to learn how to design. Then I try to look through Pinterest, and want to learn something about user interface design. But that is not enough, that's why I want to join this class.  "
"When Apple introduced the handoff feature (e.g. start writing an email on your iPhone, and an icon will pop up on your Mac that lets you finish it there), I expected it to be a big deal, at least for me. Turned out in the 2+ years since its introduction I've only used it maybe once. The reason, I believe, is that for the same example, if my computer is in my reach, I wouldn't start writing an email on my phone anyway.

I think the lesson here is that when designing features, target problems that users do have rather than invent the problems and then try to solve them."

"This past summer I interned on the engineering team at The RealReal, where I completed a full-stack project to determine trending items from their recently sold products. I worked with various data analysts, UX designers, & backend engineers. When coming to the end of my project, the head UX designer asked me to make my page mobile-first and responsive. I attempted to do this on my own and showed her the completed project, at which she informed me I had done it incorrectly. I had manually scaled my page to fit a mobile device, and she showed me that there was a way to do it by including various device sizes in my CSS/HTML code instead of eyeballing the dimensions and scale. I corrected my code where my page now was responsive for laptop, desktop, tablet, and mobile devices of 3 different sizes. Through this experience I learned not only further front-end development tools, but also to ask for help and guidance from managers when needed."
"When I TAed for Computer Networks, I thought it was impossible to use Google Cloud to host virtual machines. It was never tried before for the project that I had the set up infrastructure for, so I thought the plan was infeasible. There was no tutorial online about nested virtualization online either at that time. Nevertheless, I digged into official support document myself and found that nest virtualization has been supported since only few weeks ago. After several rounds of trial and error, i was able to set up the project infrastructures according to the official support document.

What I learned:
Do not assume there are tutorials online for everything.
Don’t give up if there isn’t one. Always explore the official docs or even the source, there might be chance."
"Coming into college and having performed very well in a few introductory courses, I was vastly confident in my ability to do anything I set my mind to, regardless of the time constraints or amount of work. This irreverent mindset led me to audaciously fill my schedule with all of the classes and commitments I found interesting or exciting, disregarding any warnings from advisors, professors, and friends. For the first half of my college experience, the attitude served me well. But in the next semester, I received a taste of reality that viscerally ingrained in me the hard truth that work in the real world is difficult, and time is limited. Ultimately, I learned that at every step, we need to carefully deliberate on how we use our time to develop our skills, relationships, and understanding of the world and others, because the way we spend our time ultimately shapes who we are.

Two semesters ago, in Spring 2017, I made the decision of taking OS and PLT at the same time. These are two of the most difficult and time-consuming CS classes, which are group-based. I'd consulted with professors, advisors, and friends beforehand, and I'd received strong, near-unanimous discouragement, as I had in semesters before. However, because of my strong academic performance in prior semesters, I overconfidently charged into the new semester with TAing responsibilities and a full 21-credit six-class + PE load including OS, PLT, and research in Prof. Hirschberg's lab. The six classes may as well have been six bullets, gradually experienced over the course of the semester.

As the semester began, I vigorously began to power through my work. But my while my rate of work was linear, the overwhelming amount of growth in assignments seemed exponential; the difficulty of each assignment increased as I worked. I needed to pull an all-nighter at least every week. Assignments came in clusters of 3 or 4, all due in the same weekend, and in some of my groups, I was the only teammate working on the assignments at all. After two months of this madness, I finally managed to adjust slightly better to the rhythms of the semester, finding like-minded and committed teammates and anticipating clusters of assignments before they were assigned.

In the end, I somehow managed the workload and performed well that semester, earning As in both OS and PLT. But it was at the cost of extreme sleep-deprivation and my health. This rude awakening firmly instilled in me a number of lessons: to treat time as a limited resource, to know my own limits, and most importantly, to be humble in my path to learning. Ultimately, in life, no resource is infinite, and careful thought and self-control are an imperative for personal growth."
"When I was working at my internship over the summer, I volunteered to take on an additional small project that used some technology that I was unfamiliar with. After starting to work on the project, I realized that I needed some guidance from one of the experienced developers, but was initially too embarrassed to ask for help since I had volunteered. I ended up spending two days stuck on a small part of the project before I finally asked one of my coworkers for help. After working with them on the problem, I was able to finish that part of the project just in time for the deadline. I learned that you shouldn't be embarrassed or afraid of asking for help: I was there to learn from the other developers, but came in with the mindset that I needed to be able to do everything on my own with no assistance. "
"I thought I wouldn't lose my charger if I plugged it behind the lab pc, I'm plugging it in the front next time."
"I interned at a company whose app included a panorama-stitching mode. At lunch one day, I asked why the panoramas contained so many visual artifacts, pointing out other algorithms without this problem. As it turned out, they chose the current algorithm because they valued its ability to give users fast results. This experience taught me to be curious before providing criticism."
"I had lost some focus as a student entering fall semester 2016, and though my academic performance that term was good, I didn't feel like I was making a hard and honest effort. I decided to take the spring term off and spent my time augmenting my art portfolio, taking a web development workshop, working at a restaurant, visiting family, and traveling. I returned to school last fall feeling revitalized, proud of my decision to take time off and of my schoolwork by the semester's end. "
"During my previous semester in the Advanced Software Engineering course, my team decided to develop a web application to rent parking spots (like Airbnb for parking spots). We invested most of our effort in developing key functionalities like displaying nearby parking spots on the google map and enabling the user to communicate with the owner of the parking spot and neglected the User Interface. While demoing to the TA, his feedback was that as an end user, he loved the features provided but wasn't impressed by our user interface. So before our final presentation, I changed the complete look and feel of our web application. During our final presentation to JP Morgan, the employees were particularly happy with our UI and one of them even mentioned that we stood out from the rest of the projects because of our UI.

This incident taught me how having a good UI helps build a terrific first impression which goes a long way in the end user's satisfaction in a product."
"One time I was wrong was during my internship at the media research company Nielsen. One of our research projects was aimed at figuring out how media immersion affected how well users remembered content (for instance, whether viewing content on a very large screen or at a closer distance would make it more memorable). My first proposal was to send participants to locations with displays of varying sizes, including theaters, and at different viewing distances. However, I was wrong that this was the best approach, as it would have been cumbersome and inefficient. Instead, we decided to create a virtual reality scene in which we could insert a virtual 2D “screen” displaying our content, which could be scaled and positioned in different ways. This could be viewable through a VR headset in one location, as opposed to sending participants to a wide range of places. From this experience, I learned that thinking of creative ways of using the right digital tools allows for much more reflexible solutions to many problems."
"I worked on an android studio project last year. Our topic was ""scientific calculator"" which could store and save special formula for Physics student. At first, we tried to make everything ""scientific"" -- super accurate. But it turns out no one would like to use it, because of the bad user-friendly design. So we started over on that part, and found our way out. 
I learnt from it that we first need to know who are our targets and their needs."
"Rather than talking about a time I was wrong about something, I would like to talk about a time I did something wrong. It was when I was the publicity chair of a dance team on campus in my sophomore year. My main responsibilities were to coordinate photographer and videographer for our dance performances. For our very first performance of the semester, there was some miscommunication between me, the president and the videographer, which led to us not having a recorded video of the performance. I realized that it was partially my fault, since I was the one who's responsible for it, but I did not make sure that we had a videographer for that show. After that, I learned to be vigilant about coordinating with people; I would managed to coordinate a photographer and a videographer a week in advance of a performance, and double check with the rest of the executive board that we certainly have them."
I met a girl last year in a class. I was very fond of her. I tried all opportunities to talk to her and put a beautiful godiva chocolate box in front of her door on Valentines day. I thought she would like me and became my girlfriend because she was very nice to me too. But I was wrong. She would rather finish homework well ahead of time rather than go to dinner with me. Well. I understood. I learned that I have no chance before a girl who prioritizes academics over all other things in life. 
"I was frustrated when I did my thesis research. I could not come up with innovative solutions. However, I finally developed my own algorithm by carefully observing collected data. The lesson I learnt is never to neglect details. "
"The process of learning React and Redux this past summer while designing a user interface for my internship involved me making many design mistakes and programming errors. React has a steep learning curve and the user interface I was designing was a complicated one. However, in making mistakes and receiving constant feedback from my boss, I was able to refine my design and learn how to write scalable and maintainable react code, resulting in a great product and experience in the end. "
"In the spring of 2016, I was taking Data Structures at Columbia as a non-degree student. At the time, I was thinking of pursuing a master's in computer science, but, having not studied CS as an undergrad, I needed to complete some undergraduate coursework first. I distinctly remember walking out of the Data Structures midterm feeling as though I had done poorly, despite having studied extensively for the exam. I tried to catch a movie after the test, but couldn't concentrate; instead, I ruminated on my ostensible failure, and considered abandoning my plans to pursue a master's. After all, if I couldn't do well at this level, what sense was there in pursing the subject at the graduate level? A week or so later, when the results of the test were published, I was surprised to see that I had done quite well on it -- well above average. What I learned from the ordeal was to not prematurely judge or assess situations; not only are supposedly catastrophic outcomes rarely so catastrophic, they can in fact be quite the opposite.   "
"I interned last semester at Microsoft and we had a hard deadline and the project didn't turn out like what I had hoped or imagined. My team wanted to ask for an extension, but I didn't want to ask for one since I wanted to live up to the expectation of my mentor. After long discussions, as the decision maker of my team, I decided to think for myself and weigh out the pros and cons. After a lot of thinking and consideration, I decided to ask for the extension and my mentor approved it. I got my team together and we worked on the project for many hours and it turned out to be just like I had hoped. We ended up placing first and everyone loved our project and it was successfully launched on the desired date. Overall, I learned that sometimes its best to take the risk and to hear out other people and take a decision without looking back. Taking risks and having things not go as planned isn't a bad thing after all. "
"When I was in High School, I was a rower at a local club. In my senior year, I was elected captain of the team and had to face new leadership challenges. At one point, I became aware of a fellow senior of mine showing up to practice while high on marijuana and drunk, and it became my responsibility to decide how to handle the situation. I had a few options which revolved around going straight to the coach or confronting the individual first and attempting to resolve the situation that way. I elected to follow the latter course of action and confronted him directly, but I was very untactful with how I went about it. Much of the conversation involved me accusing him of messing up and being a bad teammate, which only made him angrier and more inclined to lash out. There was nothing untruthful in what I said to him, and I believe it needed to be said, but I think things would have turned out better if I had asked him about the things going on in his life first and then working into what the team could do to help him, so that he could be better for himself and for us. In the end, I learned that every situation can be approached from multiple angles, and that one should strive to approach from the most positive angle they can."

"I grew up with strict parents that instilled in me the mindset that academic subjects were for the best and brightest, and because of this I had always assumed the arts were easier. I used to overlook graphic design, because I assumed that if I could get my websites up and running, I had the technical background that would enable me to easily format them to look nice. However, when I was organizing a hackathon my freshman year and I started trying to make logos and other marketing pieces for the event, I realized that I didn't even know where to start. Every lion I tried to draw, every picture layover or pretty title, looked incongruent with each other, and led to a rather haphazardly careless looking theme when put all together. My designer friend stepped in and reworked everything – teaching me skills like spacing/padding, alignment, theme continuity, etc. I learned that day how incredibly complex and creative design could be, with extreme out of box thinking and pattern matching, and I resolved from then on to try my best to learn. It's been two years, and I'm no expert, but I do think my powerpoints look a lot better than they did before!"
"A couple of semesters earlier, I overcommitted myself by taking on a full time courseload, 3 extracurricular board positions, and a part time job. I thought that I would be able to handle all of it well if I just learned to manage my time better. But, it turned out that even after my best time management skills, I was not performing my best in a lot of the activities mentioned above. The experience made me realize that regardless of how well I manage my time, I would still have a limited number of things that I could commit to and do well in. So, from the experience, I took the lesson to think about what I care about most deeply first and to prioritize based on that. So, for instance, I know that I care about both women in technology and reading. But, I care more about making a difference in the former so I decided to stay on the board of CU Women in Computer Science and not pursue a board position at Barnard Bookworms, Barnard's reading club."
high school 
"Not long ago, I had an argument with my mom. She complained that I visited my grandparents (my father's parents) constantly while ignore her feelings and I had been unfair to her since she was the one that brought me up. I got angry and thought she was unreasonable. I stopped talking to her for a few days. I think it must break her heart. I felt really sorry, sad and struggled, but didn't know how to express the feelings or just being shy to say it. I thought through what she said and realized that I might ignore her feelings sometimes. I learned that I should care for her more and had a better way of dealing with argument other than not talking and breaking both our hearts."
"I strongly believe in the value of learning through the iterative process, which means I'm wrong quite often, but I usually try to take something away from it. One of the more significant experiences I've had of being wrong was in the final  of an important chess tournament where my haste and arrogance caused me to make a big blunder and lose the title. I believe the experience was very humbling, and recalling my mistake still hurts several years later– which makes me believe I have learned something from it."
"Last semester, I took the introduction to database course. As I have taken the basic database course during undergraduate study, I thought it would be easy and did not put much effort at the beginning. However, I found I was wrong when I was taking the midterm exam. I learned that any knowledge would possibly be forgotten if we have not touched it for a long time, and things would not be as easier as we thought in the early time. I was flustered at that time, but I adjusted myself to study harder and listened to the instruction carefully. Finally I went through all the difficulties and got an A in the final exam. I learned that it would never be late if you want to have a change."

"For my group's 4156 project I was convinced that using mysql for the backend would be easier since everyone in the group had at least some experience with sql and relational databases and mongodb seemed like a whole new learning curve to overcome.  We ended up implementing basic versions of both solutions in the earlier stages of the project and I was pretty hardheaded about keeping the mysql version and even had schemas planned out for the entire scope of the project at the time.  However, as the scope of the project stretched and shifted through the semester, it became clear that our requirements had changed and my groupmate's implementation of objects to store our project's data was much more flexible and was much simpler and more elegant to change when requirements shifted.  In the end, we ended up wasting a lot of hours completely rewriting and tweaking the mysql tables to try and make it work with our changing requirements while tweaking objects in mongodb took only a few minutes after we gave up on mysql.  I learned to be more open minded about new or unfamiliar tech and platforms and being more mindful about using the right tool for the right job and exploring options to be sure of that and to hear out my teammates more."
"There are many many things for me to speak about here but the instance that immediately comes to mind is my decision to invest in Bitcoin. I was pretty late to the game and didn't actually purchase Bitcoin until around a month ago when it was at 15k. Today and the last couple days it has seen pretty drastic downward drops. I was convinced that even though I was a little late there would still be a bunch of other people late to the fad who would also be looking to get in which would continue to bring up the price. At least at the moment it appears as if I am wrong. Hopefully it will resurge again but what I learned is a smarter way to approach volatile investing like this: while it is tempting for me to just sit and wait and hope that it goes up, I believe that I need to put precautionary methods in place to capitalize on the volatile nature of bitcoin. I need to come up with pre-set rules to determine when I will buy and sell instead of just ad-hocly hoping that I get lucky as I am doing now. Hopefully I will actually implement this my future investing strategies. "
"When I began interning as a data scientist at Facebook, I assumed that I had a good idea of which websites were most popular to facebook users. I later discovered that I was completely wrong—sites like nametests.com took the cake. I learned then and there that I am by no means the average user and that it's important to actually speak to the people you're building things for"
"I work as a manager at a tutoring center for elementary to high school (and even college freshmen) students. I know I'm not the perfect manager and during my time working there thus far, I have made mistakes. One instance involves a parent/customer who had made a request for their student/child (such as focusing on a particular topic/subject/homework assignment). However, the new instructor didn't fulfill that request for the student during the 2 hour lesson. In this case, I realized it was my fault for not emphasizing to all the instructors the importance of proper communication with parents/students. I also had not made sure to clarify this specifically to the newer instructor most likely because I was accustomed to assuming that all the instructors knew the routines/guidelines/policies of their job. Additionally, I should make sure that I myself know of any complaints/requests made by parents because they are paying in order for the students to show improved academic performance in school. I made sure to communicate with the parent properly to amend and resolve the situation. "
"I once went out with my friends on Valentine's Day because my significant other said it was ""fine"" for me to do so. Much regret. ""Fine"" doesn't actually mean ""fine""."
"As an engineer I used to undervalue the business component to developing a tech startup and overvalue the engineering and technical parts. 
About two years ago, a friend reached out to me with a new startup idea. As we were close friends who worked together in the past, I almost immediately jumped on board. Our philosophy was to build first and ask questions later – as the cliché goes, ""build it and they will come"". 

About a year later we launched a beta and invited our friends to join. Turns out we built something people liked but didn't love (except for maybe one user). In retrospect, we should have spent a lot more time on the ideation phase figuring out what features people would have been passionate about. We applied to accelerators for the past two years but had no traction whatsoever. We continued to work on the startup and kept it in closed beta – my friend was concerned if we shared it on HN prematurely people would critique some of the major coding flaws within the app. On the technical side, we also over engineered the server hosting configuration – we used AWS and convox instead of a simple heroku setup. This also incurred significant server costs which caused us to eventually shut down the project. 

This past summer my friend and I started another startup with two other folk called Epigrammar (epigrammar.com). My other friend has a background in education and was a full-time teacher for a bit. Earlier last year, he had an idea for a tool for latin teachers and pitched it to his coworkers and other teachers. After some feedback, he pivoted, and the modern version of Epigrammar was born – a tool for teachers and students to collaboratively annotate educational documents, and for the teachers to automatically generate tests and assessments from the annotations. He formed the team and applied to the Princeton Entrepreneurship Lab Summer Program – and got in! 

At that point, Techcrunch Disrupt New York was quickly approaching, and my friend and I decided to develop an alpha version for the hackathon. My friend planned on building the backend in Elixir, Phoenix and GraphQL, and I planned on developing the frontend in React, Semantic UI and Apollo. Turns out he was not as comfortable with the technologies as he thought, and half-way through the hackathon, we decided to kill the backend and just developed a polished frontend for the demo. 

After many sleepless and progressively delirious hours, we finished the frontend and demoed our product on stage. It was an outstanding success. Our project was written about in Techcrunch, went somewhat viral on Twitter, and included in a random Russian's educational technology presentation. 
Going into the Summer Program, the team spent a week in boot camp where we were exposed to a business-oriented perspective to starting a startup. We met with our mentor on a regular basis, and the program shaped the way we initially executed. We took the initial frontend, merged it with a few sketch files, and transformed it into a video demo/trailer for our product. My friend with a teaching background presented it at a UPenn Graduate School of Education networking event to get feedback from potential future users. People were thrilled with the demo, offering to pay us on the spot for a subscription. Turns out this customer-centric approach to developing a tech startup works really well. 

I ended up leaving Epigrammar in September due to cofounder issues, and started another startup called Prism (simpleprism.com) with another friend. Long story short, we didn't touch a line of code other than the landing page, and instead spent a significant amount of time polishing our business plan and idea, and applied to several accelerators. We ended up interviewing with Y Combinator, but since we were to nascent in development, and due to a weak in-person interview, we didn't get in. 

Through these experiences I've gained a significant appreciation for the business component to developing a tech startup. You can't just build a product, there's a lot more crucial nontechnical work that occurs behind the scenes. I hope this understanding will positively shape my ventures in the future.
"
"I had a group project for PLT and one person was not contributing throughout the entire project and I and the other members of my team ended up doing significantly more work to compensate. I now realize the importance of open communication, because although they did no work, I was partially at fault for not talking with them sooner about the issue. If I had spoken up sooner about the issue, the work may have been more fairly divided."
"Before coming to Columbia, I had background in both biomedical data analysis and social sciences (minor in college) and because I interacted with two completely different group of people (at a liberal arts college), at one point I mistakenly thought that these two fields were completely separate.  After starting the biomedical informatics program at Columbia, I learned that methods in social sciences are often borrowed in human computer interaction and they can contribute significantly to biomedical informatics by incoporating the human factors necessary for building successful informatics tools that supports biomedicine.  This process came about as informaticians and human factors scientists interacted and collaborated.   I learned that as I expand my social interactions circles, my worldview is expanded to include more ideas and possibilities.  Additionally, I learned that interaction and collaboration between people in seemingly unrelated fields can foster borrowing and combining methods in different fields and lead to new areas of interdisciplinary research.  "
"I once ran up to hug someone from behind who I thought was my mother, only to realize that she was totally not my mother; I caught an elbow to the nose and learned to ""look before you leap."""
"In a group project last semester, I thought there was only one way of going about solving a problem. I was hellbent on using my method. The other group members disagreed. I was very angry, but put all my effort into attempting to solve it their way. It ended up working. There are many ways to skin a cat and everyone is very smart. I should never close of or cut off someones opinion-- rather I should be open to whatever they have to say, whether I think it's right or wrong. I should always question preconceived judgements I make."
"I thought it was improbably that one could do production level machine learning by using only a few thousand hand labeled training data, but it turns out you can and facebook does that."
"I tutor high school students usually 14+ hours a week (plus about 1.5 hours in total travel there and back for each 2 hr session).  Last semester I took on too much and agreed to tutor too many people, and quickly realized I was not able to do this..However since I felt bad for making a commitment I stayed in this position for almost two months while doing all of my difficult coursework and I quickly realized that I needed to change something.  So, I had a friend at Columbia take my position for two of the students, which was a pretty good solution.  I learned that while I still should always push myself, I should not make commitments that drain me and leave me without sleep because I end up not being present in all of the things I do, and it is unhealthy."
"A friend recently became unreasonably upset, and the reason for her being upset also made me upset, which caused me to respond with anger. Never do this. If your friend, coworker, or anyone is angry and makes you upset, replying angrily will often make things go worse. I learned to first calm down, think, and then try to calm the other person down to diffuse the situation."
"Recently I was working with a team on project using IBM Watson's tone analyzer to detect undertones of mental illness in social media-- more specifically we began with tweets. Though the majority of our assignment would be in Javascript, I know Python significantly better, so I pulled tweets from the given usernames using Python. However, when it came time to link this with our frontend, we realized that the quick, hack-y way I had tried to use to connect Python and Javascript was impossible for the on-click operation. So, I rewrote the program in Javascript with a bit of help from an experienced programmer. I recognized that he knew far more than I did about this new language, and was able to work through the program with him as I thought of ways to rewrite the program, and he assisted me with built-in functions and syntax. I learned that I should look a bit farther ahead before attempting something that initially seems easier because in the end, the new Javascript file I had written combined the two previous programs I had tried connecting, with far fewer lines of code. I enjoy learning from every experience--whether I'm right or wrong-- but I believe the key to learning something new is recognizing when you need help, and I'm practicing that a bit more each day. "
"I have been wrong about a lot of things, if not most things in life. I used to work in the IT department at my old university and when I first started, I was tasked with repairing a student's laptop. The computer was very slow and almost impossible to use, so I decided to start with a virus scan. It turned out that the computer's hard drive was failing, and the extensive scan was enough to tip it over the edge. Luckily, without my knowledge, my boss had already backed up the student's data, including her almost completed senior thesis. From then on, I never started working on a computer without making sure an appropriate backup was done, and I have kept a robust and extensive backup of my own personal data at all times."
"During the development of an web application, I have some problems with the UI design and implementation. So I learnt Bootstrap and Flask by myself. And finally, I did a good job."
"I was wrong about a UI layout for a website that I made for a client where I made UI which kind of displays all the things in the home page itself. After developing that layout halfway through, then I realized that we need to have paging mechanism otherwise user has to scroll through endlessly to find his/her options. Also, when a user clicks back button, he / she has to go back to the same location on the page where the user was previously and not the start of the page."
"I have done some projects about wireless network. Some how I heard about that 5G wi-fi signal has the better ability to get through the wall than 2.4G wi-fi signal. Based on my experience in this area, I confidently regarded it as the true without searching or verifying it. Until I made a mistake in the public, I noticed that I was wrong. From then on, I would not believe in something that I think it is. I would verify the answer I got and make sure I am right before I tell somebody about it."
"Last semester I built a data visualization that showcases the reality of corporate taxes in America. The visualization featured multiple slides that each featured an animated bar graph, and each slide's animations had a preset speed. However, when I published the project, I got a lot of feedback on the slides being too fast, as well as too slow! I realized that one of the most valued characteristics of a good UI is letting people have as much control as possible, so as to satisfy all groups of users."